// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/OpenIoT-tools/OpenIoT/internal/core/models/entity"
	mock "github.com/stretchr/testify/mock"
)

// DeployUseCase is an autogenerated mock type for the DeployUseCase type
type DeployUseCase struct {
	mock.Mock
}

type DeployUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *DeployUseCase) EXPECT() *DeployUseCase_Expecter {
	return &DeployUseCase_Expecter{mock: &_m.Mock}
}

// SendUpdate provides a mock function with given fields: hoursLong, devices
func (_m *DeployUseCase) SendUpdate(hoursLong float64, devices ...*entity.Device) (int, int, error) {
	_va := make([]interface{}, len(devices))
	for _i := range devices {
		_va[_i] = devices[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, hoursLong)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendUpdate")
	}

	var r0 int
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(float64, ...*entity.Device) (int, int, error)); ok {
		return rf(hoursLong, devices...)
	}
	if rf, ok := ret.Get(0).(func(float64, ...*entity.Device) int); ok {
		r0 = rf(hoursLong, devices...)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(float64, ...*entity.Device) int); ok {
		r1 = rf(hoursLong, devices...)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(float64, ...*entity.Device) error); ok {
		r2 = rf(hoursLong, devices...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeployUseCase_SendUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendUpdate'
type DeployUseCase_SendUpdate_Call struct {
	*mock.Call
}

// SendUpdate is a helper method to define mock.On call
//   - hoursLong float64
//   - devices ...*entity.Device
func (_e *DeployUseCase_Expecter) SendUpdate(hoursLong interface{}, devices ...interface{}) *DeployUseCase_SendUpdate_Call {
	return &DeployUseCase_SendUpdate_Call{Call: _e.mock.On("SendUpdate",
		append([]interface{}{hoursLong}, devices...)...)}
}

func (_c *DeployUseCase_SendUpdate_Call) Run(run func(hoursLong float64, devices ...*entity.Device)) *DeployUseCase_SendUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*entity.Device, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*entity.Device)
			}
		}
		run(args[0].(float64), variadicArgs...)
	})
	return _c
}

func (_c *DeployUseCase_SendUpdate_Call) Return(devicesByGroup int, updateInterval int, err error) *DeployUseCase_SendUpdate_Call {
	_c.Call.Return(devicesByGroup, updateInterval, err)
	return _c
}

func (_c *DeployUseCase_SendUpdate_Call) RunAndReturn(run func(float64, ...*entity.Device) (int, int, error)) *DeployUseCase_SendUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeployUseCase creates a new instance of DeployUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeployUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeployUseCase {
	mock := &DeployUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
