// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SecurityToken is an autogenerated mock type for the SecurityToken type
type SecurityToken struct {
	mock.Mock
}

type SecurityToken_Expecter struct {
	mock *mock.Mock
}

func (_m *SecurityToken) EXPECT() *SecurityToken_Expecter {
	return &SecurityToken_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: tokenData, minutesLong, privateKeyName
func (_m *SecurityToken) GenerateToken(tokenData map[string]interface{}, minutesLong int, privateKeyName string) (string, error) {
	ret := _m.Called(tokenData, minutesLong, privateKeyName)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, int, string) (string, error)); ok {
		return rf(tokenData, minutesLong, privateKeyName)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}, int, string) string); ok {
		r0 = rf(tokenData, minutesLong, privateKeyName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}, int, string) error); ok {
		r1 = rf(tokenData, minutesLong, privateKeyName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityToken_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type SecurityToken_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - tokenData map[string]interface{}
//   - minutesLong int
//   - privateKeyName string
func (_e *SecurityToken_Expecter) GenerateToken(tokenData interface{}, minutesLong interface{}, privateKeyName interface{}) *SecurityToken_GenerateToken_Call {
	return &SecurityToken_GenerateToken_Call{Call: _e.mock.On("GenerateToken", tokenData, minutesLong, privateKeyName)}
}

func (_c *SecurityToken_GenerateToken_Call) Run(run func(tokenData map[string]interface{}, minutesLong int, privateKeyName string)) *SecurityToken_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *SecurityToken_GenerateToken_Call) Return(_a0 string, _a1 error) *SecurityToken_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityToken_GenerateToken_Call) RunAndReturn(run func(map[string]interface{}, int, string) (string, error)) *SecurityToken_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewSecurityToken creates a new instance of SecurityToken. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecurityToken(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecurityToken {
	mock := &SecurityToken{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
