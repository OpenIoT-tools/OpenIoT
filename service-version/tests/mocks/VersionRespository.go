// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/OpenIoT-tools/OpenIoT/internal/core/models/entity"
	mock "github.com/stretchr/testify/mock"
)

// VersionRespository is an autogenerated mock type for the VersionRespository type
type VersionRespository struct {
	mock.Mock
}

type VersionRespository_Expecter struct {
	mock *mock.Mock
}

func (_m *VersionRespository) EXPECT() *VersionRespository_Expecter {
	return &VersionRespository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: version
func (_m *VersionRespository) Create(version *entity.Version) (*entity.Version, error) {
	ret := _m.Called(version)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Version) (*entity.Version, error)); ok {
		return rf(version)
	}
	if rf, ok := ret.Get(0).(func(*entity.Version) *entity.Version); ok {
		r0 = rf(version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Version)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Version) error); ok {
		r1 = rf(version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VersionRespository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type VersionRespository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - version *entity.Version
func (_e *VersionRespository_Expecter) Create(version interface{}) *VersionRespository_Create_Call {
	return &VersionRespository_Create_Call{Call: _e.mock.On("Create", version)}
}

func (_c *VersionRespository_Create_Call) Run(run func(version *entity.Version)) *VersionRespository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Version))
	})
	return _c
}

func (_c *VersionRespository_Create_Call) Return(_a0 *entity.Version, _a1 error) *VersionRespository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VersionRespository_Create_Call) RunAndReturn(run func(*entity.Version) (*entity.Version, error)) *VersionRespository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: versionId
func (_m *VersionRespository) FindById(versionId string) (*entity.Version, error) {
	ret := _m.Called(versionId)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *entity.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Version, error)); ok {
		return rf(versionId)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Version); ok {
		r0 = rf(versionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Version)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(versionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VersionRespository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type VersionRespository_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - versionId string
func (_e *VersionRespository_Expecter) FindById(versionId interface{}) *VersionRespository_FindById_Call {
	return &VersionRespository_FindById_Call{Call: _e.mock.On("FindById", versionId)}
}

func (_c *VersionRespository_FindById_Call) Run(run func(versionId string)) *VersionRespository_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *VersionRespository_FindById_Call) Return(_a0 *entity.Version, _a1 error) *VersionRespository_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VersionRespository_FindById_Call) RunAndReturn(run func(string) (*entity.Version, error)) *VersionRespository_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// FindByNameAndCategory provides a mock function with given fields: versionName, category
func (_m *VersionRespository) FindByNameAndCategory(versionName string, category *entity.Category) (*entity.Version, error) {
	ret := _m.Called(versionName, category)

	if len(ret) == 0 {
		panic("no return value specified for FindByNameAndCategory")
	}

	var r0 *entity.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *entity.Category) (*entity.Version, error)); ok {
		return rf(versionName, category)
	}
	if rf, ok := ret.Get(0).(func(string, *entity.Category) *entity.Version); ok {
		r0 = rf(versionName, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Version)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *entity.Category) error); ok {
		r1 = rf(versionName, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VersionRespository_FindByNameAndCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByNameAndCategory'
type VersionRespository_FindByNameAndCategory_Call struct {
	*mock.Call
}

// FindByNameAndCategory is a helper method to define mock.On call
//   - versionName string
//   - category *entity.Category
func (_e *VersionRespository_Expecter) FindByNameAndCategory(versionName interface{}, category interface{}) *VersionRespository_FindByNameAndCategory_Call {
	return &VersionRespository_FindByNameAndCategory_Call{Call: _e.mock.On("FindByNameAndCategory", versionName, category)}
}

func (_c *VersionRespository_FindByNameAndCategory_Call) Run(run func(versionName string, category *entity.Category)) *VersionRespository_FindByNameAndCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*entity.Category))
	})
	return _c
}

func (_c *VersionRespository_FindByNameAndCategory_Call) Return(_a0 *entity.Version, _a1 error) *VersionRespository_FindByNameAndCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VersionRespository_FindByNameAndCategory_Call) RunAndReturn(run func(string, *entity.Category) (*entity.Version, error)) *VersionRespository_FindByNameAndCategory_Call {
	_c.Call.Return(run)
	return _c
}

// ListByCategory provides a mock function with given fields: categoryId
func (_m *VersionRespository) ListByCategory(categoryId string) (*[]entity.Version, error) {
	ret := _m.Called(categoryId)

	if len(ret) == 0 {
		panic("no return value specified for ListByCategory")
	}

	var r0 *[]entity.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[]entity.Version, error)); ok {
		return rf(categoryId)
	}
	if rf, ok := ret.Get(0).(func(string) *[]entity.Version); ok {
		r0 = rf(categoryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Version)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(categoryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VersionRespository_ListByCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByCategory'
type VersionRespository_ListByCategory_Call struct {
	*mock.Call
}

// ListByCategory is a helper method to define mock.On call
//   - categoryId string
func (_e *VersionRespository_Expecter) ListByCategory(categoryId interface{}) *VersionRespository_ListByCategory_Call {
	return &VersionRespository_ListByCategory_Call{Call: _e.mock.On("ListByCategory", categoryId)}
}

func (_c *VersionRespository_ListByCategory_Call) Run(run func(categoryId string)) *VersionRespository_ListByCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *VersionRespository_ListByCategory_Call) Return(_a0 *[]entity.Version, _a1 error) *VersionRespository_ListByCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VersionRespository_ListByCategory_Call) RunAndReturn(run func(string) (*[]entity.Version, error)) *VersionRespository_ListByCategory_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: versionId
func (_m *VersionRespository) Remove(versionId string) error {
	ret := _m.Called(versionId)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(versionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VersionRespository_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type VersionRespository_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - versionId string
func (_e *VersionRespository_Expecter) Remove(versionId interface{}) *VersionRespository_Remove_Call {
	return &VersionRespository_Remove_Call{Call: _e.mock.On("Remove", versionId)}
}

func (_c *VersionRespository_Remove_Call) Run(run func(versionId string)) *VersionRespository_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *VersionRespository_Remove_Call) Return(_a0 error) *VersionRespository_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VersionRespository_Remove_Call) RunAndReturn(run func(string) error) *VersionRespository_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// NewVersionRespository creates a new instance of VersionRespository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVersionRespository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VersionRespository {
	mock := &VersionRespository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
