// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/OpenIoT-tools/OpenIoT/internal/core/models/entity"
	mock "github.com/stretchr/testify/mock"
)

// Broker is an autogenerated mock type for the Broker type
type Broker struct {
	mock.Mock
}

type Broker_Expecter struct {
	mock *mock.Mock
}

func (_m *Broker) EXPECT() *Broker_Expecter {
	return &Broker_Expecter{mock: &_m.Mock}
}

// SendUpdateToDevice provides a mock function with given fields: message, device
func (_m *Broker) SendUpdateToDevice(message interface{}, device *entity.Device) error {
	ret := _m.Called(message, device)

	if len(ret) == 0 {
		panic("no return value specified for SendUpdateToDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, *entity.Device) error); ok {
		r0 = rf(message, device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Broker_SendUpdateToDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendUpdateToDevice'
type Broker_SendUpdateToDevice_Call struct {
	*mock.Call
}

// SendUpdateToDevice is a helper method to define mock.On call
//   - message interface{}
//   - device *entity.Device
func (_e *Broker_Expecter) SendUpdateToDevice(message interface{}, device interface{}) *Broker_SendUpdateToDevice_Call {
	return &Broker_SendUpdateToDevice_Call{Call: _e.mock.On("SendUpdateToDevice", message, device)}
}

func (_c *Broker_SendUpdateToDevice_Call) Run(run func(message interface{}, device *entity.Device)) *Broker_SendUpdateToDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(*entity.Device))
	})
	return _c
}

func (_c *Broker_SendUpdateToDevice_Call) Return(_a0 error) *Broker_SendUpdateToDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Broker_SendUpdateToDevice_Call) RunAndReturn(run func(interface{}, *entity.Device) error) *Broker_SendUpdateToDevice_Call {
	_c.Call.Return(run)
	return _c
}

// NewBroker creates a new instance of Broker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBroker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Broker {
	mock := &Broker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
