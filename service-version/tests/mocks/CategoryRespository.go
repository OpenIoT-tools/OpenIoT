// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/OpenIoT-tools/OpenIoT/internal/core/models/entity"
	mock "github.com/stretchr/testify/mock"
)

// CategoryRespository is an autogenerated mock type for the CategoryRespository type
type CategoryRespository struct {
	mock.Mock
}

type CategoryRespository_Expecter struct {
	mock *mock.Mock
}

func (_m *CategoryRespository) EXPECT() *CategoryRespository_Expecter {
	return &CategoryRespository_Expecter{mock: &_m.Mock}
}

// CreateCategory provides a mock function with given fields: category
func (_m *CategoryRespository) CreateCategory(category *entity.Category) (*entity.Category, error) {
	ret := _m.Called(category)

	if len(ret) == 0 {
		panic("no return value specified for CreateCategory")
	}

	var r0 *entity.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Category) (*entity.Category, error)); ok {
		return rf(category)
	}
	if rf, ok := ret.Get(0).(func(*entity.Category) *entity.Category); ok {
		r0 = rf(category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Category) error); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryRespository_CreateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCategory'
type CategoryRespository_CreateCategory_Call struct {
	*mock.Call
}

// CreateCategory is a helper method to define mock.On call
//   - category *entity.Category
func (_e *CategoryRespository_Expecter) CreateCategory(category interface{}) *CategoryRespository_CreateCategory_Call {
	return &CategoryRespository_CreateCategory_Call{Call: _e.mock.On("CreateCategory", category)}
}

func (_c *CategoryRespository_CreateCategory_Call) Run(run func(category *entity.Category)) *CategoryRespository_CreateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Category))
	})
	return _c
}

func (_c *CategoryRespository_CreateCategory_Call) Return(_a0 *entity.Category, _a1 error) *CategoryRespository_CreateCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CategoryRespository_CreateCategory_Call) RunAndReturn(run func(*entity.Category) (*entity.Category, error)) *CategoryRespository_CreateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// ListCategory provides a mock function with no fields
func (_m *CategoryRespository) ListCategory() (*[]entity.Category, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListCategory")
	}

	var r0 *[]entity.Category
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]entity.Category, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]entity.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Category)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryRespository_ListCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCategory'
type CategoryRespository_ListCategory_Call struct {
	*mock.Call
}

// ListCategory is a helper method to define mock.On call
func (_e *CategoryRespository_Expecter) ListCategory() *CategoryRespository_ListCategory_Call {
	return &CategoryRespository_ListCategory_Call{Call: _e.mock.On("ListCategory")}
}

func (_c *CategoryRespository_ListCategory_Call) Run(run func()) *CategoryRespository_ListCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CategoryRespository_ListCategory_Call) Return(_a0 *[]entity.Category, _a1 error) *CategoryRespository_ListCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CategoryRespository_ListCategory_Call) RunAndReturn(run func() (*[]entity.Category, error)) *CategoryRespository_ListCategory_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveCategory provides a mock function with given fields: categoryId
func (_m *CategoryRespository) RemoveCategory(categoryId string) error {
	ret := _m.Called(categoryId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(categoryId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CategoryRespository_RemoveCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveCategory'
type CategoryRespository_RemoveCategory_Call struct {
	*mock.Call
}

// RemoveCategory is a helper method to define mock.On call
//   - categoryId string
func (_e *CategoryRespository_Expecter) RemoveCategory(categoryId interface{}) *CategoryRespository_RemoveCategory_Call {
	return &CategoryRespository_RemoveCategory_Call{Call: _e.mock.On("RemoveCategory", categoryId)}
}

func (_c *CategoryRespository_RemoveCategory_Call) Run(run func(categoryId string)) *CategoryRespository_RemoveCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CategoryRespository_RemoveCategory_Call) Return(_a0 error) *CategoryRespository_RemoveCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CategoryRespository_RemoveCategory_Call) RunAndReturn(run func(string) error) *CategoryRespository_RemoveCategory_Call {
	_c.Call.Return(run)
	return _c
}

// NewCategoryRespository creates a new instance of CategoryRespository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategoryRespository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CategoryRespository {
	mock := &CategoryRespository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
